#!/bin/sh

# Copyright (c) 2010, Intel Corporation
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright notice,
#      this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation
#      and/or other materials provided with the distribution.
#    * Neither the name of Intel Corporation nor the names of its contributors
#      may be used to endorse or promote products derived from this software
#      without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# stop on error
set -e

workdir="$(mktemp -d)"
trap "rm -rf $workdir" 0

# variables
export GRUB_CONTRIB=$HOME/src/grub2/bits
grub_src=$HOME/src/grub2/grub

# Figure out the commit ID of $GRUB_CONTRIB
buildid="$(cd "$GRUB_CONTRIB" && (git rev-parse HEAD 2>/dev/null || echo "Unknown - not built from repository"))"
buildnum="$(git rev-list HEAD 2>/dev/null | wc -l)"
if [ $buildnum -eq 0 ] ; then
    buildnum="unknown"
fi

prefix=$workdir/grub-inst
target=$workdir/bits-$buildnum

# build commands
cd $grub_src
# Work around grub-mkimage remembering the old prefix
if [ -e Makefile ]; then
    make distclean
fi
./autogen.sh
./configure --prefix=$prefix
make
make install

# Install GRUB to a temporary directory, but don't actually write a boot track
mkdir -p $target/boot/grub
touch $target/boot/grub/device.map
grub_modules="biosdisk fat part_msdos"
$prefix/sbin/grub-install --root-directory=$target --modules="$grub_modules" --no-floppy --grub-mkdevicemap=/bin/true --grub-mkimage=/bin/true --grub-probe=/bin/true --grub-setup=/bin/true /dev/null
$prefix/bin/grub-mkimage -O i386-pc --output=$target/boot/grub/core.img --prefix=/boot/grub $grub_modules

mkdir -p $target/boot/mcu
mkdir -p $target/boot/mcu.first
mkdir -p $target/boot/syslinux
cp $GRUB_CONTRIB/syslinux/* $target/boot/syslinux/
# copy menu files
(cd $GRUB_CONTRIB && git archive HEAD cfg) | tar --delete cfg/nodist | tar -xf - -C $target/boot
echo 'source /boot/cfg/toplevel.cfg' > $target/boot/grub/grub.cfg
cmdlist () {
    for d in $GRUB_CONTRIB/rc/* ; do
        mod=$(basename $d)
        if [ "$mod" = "conf" ] || [ "$mod" = "common" ] || [ "$mod" = "include" ]; then
            continue
        fi
        grep " $mod\$" $grub_src/command.lst | sed 's/^\*\?//;s/:.*$//'
    done | sort
}
{
    echo '# This file is automatically generated'
    cmdlist | while read cmd ; do
        cat <<CMD

menuentry "$cmd" {
    set pager=1
    $cmd --help
    set pager=0
}
CMD
    done
} > $target/boot/cfg/cmdhelp.cfg
{
    sed "s/@@BUILDID@@/$buildid/g; s/@@BUILDNUM@@/$buildnum/g" $GRUB_CONTRIB/README.txt
    cmdlist | todos
} > $target/boot/README.txt

# Include source code
mkdir $target/boot/src
rm -f grub*.tar.gz
make dist
cp grub*.tar.gz $target/boot/src/
(cd $GRUB_CONTRIB && git archive --prefix=bits/ HEAD | tar --delete bits/cfg/nodist | gzip -9 > $target/boot/src/bits-$buildnum.tar.gz)

# Build the zip file
cp $GRUB_CONTRIB/INSTALL.txt $target
distzip=$GRUB_CONTRIB/bits-$buildnum.zip
rm -f $distzip
(cd $workdir && zip -qr $distzip bits-$buildnum/)
cp $distzip $GRUB_CONTRIB/bits-latest.zip

# Generate nodist variant
(cd $GRUB_CONTRIB && git archive HEAD cfg/nodist) | tar -xf - -C $target/boot
rm $target/boot/src/bits-$buildnum.tar.gz
(cd $GRUB_CONTRIB && git archive --prefix=bits/ HEAD | gzip -9 > $target/boot/src/bits-$buildnum-nodist.tar.gz)
mv $workdir/bits-$buildnum $workdir/bits-$buildnum-nodist
distzip=$GRUB_CONTRIB/bits-$buildnum-nodist.zip
rm -f $distzip
(cd $workdir && zip -qr $distzip bits-$buildnum-nodist/)
cp $distzip $GRUB_CONTRIB/bits-latest-nodist.zip
